#include <iostream>
#include <Windows.h>
#include <string>
#include <thread>
#include <vector>
#include <mutex>

#include "LuaState.hpp"
#include "Callcheck.hpp"
#include "Compiler/include/BytecodeBuilder.h"
#include "Compiler/include/Compiler.h"


namespace Lua
{
	void r_decrement_top(uintptr_t rs)
	{
		*(uintptr_t*)(rs + Offsets::lua_state_top) -= 16;
	}


	void r_sandboxthread(uintptr_t rs)
	{
		Addresses::r_lua_createtable(rs, 0, 0);
		Addresses::r_lua_createtable(rs, 0, 0);
		Addresses::r_lua_pushstring(rs, "__index");
		Addresses::r_lua_pushvalue(rs, -10002);
		Addresses::r_lua_settable(rs, -3);
		Addresses::r_lua_setmetatable(rs, -2);
		Addresses::r_lua_replace(rs, -10002);
	}


	void push_global(uintptr_t rs, int function, const char* globalname)
	{
		Addresses::r_lua_pushcclosure(rs, function, 0, 0, 0);
		Addresses::r_lua_setfield(rs, -10002, globalname);
	}
}


namespace Api
{
	int getgenv(uintptr_t rs)
	{
		Addresses::r_lua_pushvalue(rs, -10002);

		return 1;
	}


	int getreg(uintptr_t rs)
	{
		Addresses::r_lua_pushvalue(rs, -10000);

		return 1;
	}


	void registration(uintptr_t rs)
	{
		// register common functions getgenv and getreg
		Lua::push_global(rs, convert_closure((uintptr_t)getgenv), "getgenv"); // returns global index
		Lua::push_global(rs, convert_closure((uintptr_t)getreg), "getreg"); // returns index register
	}
}